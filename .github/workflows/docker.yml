name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          docker build --no-cache --rm --file Dockerfile .
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build --no-cache
            docker-compose --file docker-compose.test.yml up application
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build --no-cache --rm . --file Dockerfile --tag ${{ github.REPOSITORY }}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ github.REPOSITORY_OWNER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image
        run: |
          IMAGE_ID=${{ github.REPOSITORY }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo TAG=$IMAGE_ID:$VERSION

          docker tag $IMAGE_ID $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
